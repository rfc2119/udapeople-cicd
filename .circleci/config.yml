version: 2.1

# TODO: repeated installation of typescript and webpack
# NOTE: when ssh'ing into a circleci container, DO NOT specify ssh user
# on the command line. ssh -p 64535 -i <keyfile> 34.224.101.194
# NOTE: commands run in containers are run by a priviliged user (not all images)
# NOTE: add_ssh_keys copies the private key(s) from your circleci account
# NOTE: node v13 is needed to run the backend
# NOTE: having this syntax error: https://knowledge.udacity.com/questions/345234
# renders a production build unusable. despite all workarounds, i had to use
# the 'start' script, i.e "npm run start"
# following the solution here https://knowledge.udacity.com/questions/489016
# led me to here https://knowledge.udacity.com/questions/345234 (other import
# errors) which is unsolved as well
#
# pipeline variables
parameters:
  workflow-id:
    type: string
    default: "cd0d8qrsenyt"   # Hint: RDS auto-generated ID

commands:
  install-awscli-cmd:
    description: Installs AWS CLI (TODO: needs improvment)
    parameters:
      pkg-manager:
        type: string
        default: "apt"
    steps:
      - run: echo "installing awscli with << parameters.pkg-manager >>"
      - run:
          name: Install AWS CLI through Python 3
          command: |
            # version=$(cat /proc/version)
            # if [[ "$version" =~ "deb" ]]; then
            # if command -v "apk"; then
            pkg-mgr=<< parameters.pkg-manager >>
            case ${pkg-mgr,,} in
              "apt")
                apt install -y python3 python3-pip;;
              "apk")
                apk add python3 python3-pip;;
              "yum")
                yum install -y python3 python3-pip;;
              *)
                echo "package manager not supported ?";;
            esac
            pip install awscli

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: env_var_name  # see https://circleci.com/docs/2.0/reusing-config/#environment-variable-name
        default: ID
      install_deps:
        type: boolean
        default: false
    steps:
      - when:
          condition: install_deps
          steps:
            - install-awscli-cmd
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${<< parameters.id >>}
            aws cloudformation delete-stack --stack-name udapeople-backend-${<< parameters.id >>}
            aws cloudformation delete-stack --stack-name udapeople-cloudfront-s3-${<< parameters.id >>}
            # TODO: destroy s3 bucket as well
            aws s3 rm s3://udapeople-${<< parameters.id >>}/ --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: env_var_name  # see https://circleci.com/docs/2.0/reusing-config/#environment-variable-name
        default: ID
      install_deps:
        type: boolean
        default: false
    steps:
      - when:
          condition: install_deps
          steps:
            - install-awscli-cmd
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # TODO: hard-coded token
            curl -H "token: 488b0450-32fc-4365-8f61-e9600d091338" \
                  "https://api.memstash.io/values/memstash_key_${<< parameters.id >>}"
            SUCCESS=$(!!)         # repeat last command
            if(( $SUCCESS==0 ));  # 0 for success, non-zero for failure
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install webpack # install webpack
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install typescript  # install typescript (no need to install ALL packages)
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install oauth-sign  # some test suite fails to run in absense of pauth package
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install jest  # TODO: how on earth is the test runner not installed ? even though the same image is used...
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
              
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan Front-end for vulnerabilites
          command: |
            cd frontend
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend
              
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan Back-end for vulnerabilites
          command: |
            cd backend
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend

  # workflow id: cd0d8qrsenyt
  # see https://circleci.com/docs/2.0/env-vars
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    environment:
      ID: << pipeline.parameters.workflow-id >>
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "13:19:d0:85:aa:eb:66:62:a6:99:db:99:a7:8d:5a:51"   # udacity project 3 key
      - run:
          yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="backend-$ID" \
              --stack-name "udapeople-backend-$ID" \
              --parameter-overrides ID=$ID
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend-$ID \
              --stack-name udapeople-frontend-$ID \
              --parameter-overrides ID=$ID
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: .circleci/ansible
          command: |
            echo "cwd: $CIRCLE_WORKING_DIRECTORY"
            aws ec2 describe-instances \
              --filters Name="tag:Name,Values=backend-$ID" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text | tee inventory.txt
            # TODO: you should append to the inventory, not overwrite
            # this works because we've only one host, but it fails to scale
            # $CIRCLE_WORKING_DIRECTORY defaults to "project"
            # see https://circleci.com/docs/2.0/configuration-reference/#jobs
            echo -e '[defaults]\nhost_key_checking = false' | tee ansible.cfg

      # this step requires tar and gzip to be installed on the image
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/.circleci/ansible/ansible.cfg
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      # image: python:3.7-slim-buster
      # based on circleci's cimg/base which is an optimized ubuntu image
      - image: cimg/python:3.8
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      # thus adds private keys of fingerprint X to the server, so that you could
      # use ssh from within the server to other machines
      - add_ssh_keys:
        # in addition to copying private key from circleci, adds the following to config
        # Host !github.com *
        #   IdentitiesOnly no
        #     IdentityFile /home/circleci/.ssh/id_rsa_1319d085aaeb6662a699db99a78d5a51
          fingerprints:
            - "13:19:d0:85:aa:eb:66:62:a6:99:db:99:a7:8d:5a:51"   # udacity project 3 key
      # attach workspace
      # The workspace can be used to pass along unique data built during a job
      # to other jobs in the same workflow
      - attach_workspace:
          at: /              # TODO: redundant ?
      - restore_cache:
          keys: [v2-pip-cache]
      - run:
          name: Install dependencies
          command: |
            pip install ansible
      - save_cache:
          paths: [/home/circleci/.cache/pip]
          key: v2-pip-cache
      # TODO: why the duck does ansible not use host_key_checking except from ansible.cfg ?
      - run:
          name: Configure server
          no_output_timeout: 35m
          working_directory: .circleci/ansible
          command: |
            # cp /tmp/project/.circleci/ansible/inventory.txt ./  # TODO: redundant ?
            # echo -e '[defaults]\nhost_key_checking = false' | tee ansible.cfg
            # echo -e '[web:vars]\nhost_key_checking=false' | tee -a inventory.txt
            # export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook configure-server.yml  -i inventory.txt -vvvv
            #-e 'ansible_host_key_checking=false'\
            # -e 'ansible_connection=ssh'\
            # -e 'ansible_user=ubuntu' \
            # exit 1
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    environment:
      ID: << pipeline.parameters.workflow-id >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          no_output_timeout: 15m
          command: |
            cd backend    # migrations script are found at the backend
            npm run migrations |& tee migrations.out    # pipe stderr as well
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" backend/migrations.out;
            then
              echo "migrations ran successfully! notifying memstash"
              curl -H "Content-Type: text/plain" \
                   -H "token: 488b0450-32fc-4365-8f61-e9600d091338" \
                   --request PUT --data "0" \
                   "https://api.memstash.io/values/memstash_key_${ID}"
            else
              echo "no migrations have been done"
              curl -H "Content-Type: text/plain" \
                   -H "token: 488b0450-32fc-4365-8f61-e9600d091338" \
                   --request PUT --data "2" \
                   "https://api.memstash.io/values/memstash_key_${ID}"
            fi
      - run:
          name: LogOnFail
          when: on_fail
          command: |
            cat /home/circleci/.npm/_logs/*-debug.log
            ls -la
            cat backend/migration.out

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:latest
    environment:
      ID: << pipeline.parameters.workflow-id >>
    steps:
      - checkout
      - run:
          name: Install docker image dependencies (and attach_workspace)
          command: |
            curl -O https://rpm.nodesource.com/setup_13.x   # saves output as setup_13.x
            bash setup_13.x
            yum install -y tar gzip nodejs
            # cd frontend
            # npm install webpack # install webpack
            # npm run build
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: /
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url and bake it into the frontend code
          command: |
            echo "backend ip from ansible: $(cat .circleci/ansible/inventory.txt)"
            # TODO: inventory.txt will not contain only the backend ip (extract the ip)
            export BACKEND_IP=$(cat .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "Backend API URL: ${API_URL}"
            cd frontend
            npm install webpack # TODO: why ? isn't this already installed ?
            npm run build   # bakes the API_URL into the generated code
      - run:
          name: Deploy frontend objects
          command: |
            # copy the compiled files to our public s3 bucket (destination: bucket/file1)
            # s3 bucket name is semi hard-coded in files/cloudfront.yml
            export BUCKET_NAME="udapeople-${ID}"
            echo "bucket name: $BUCKET_NAME"
            aws s3 sync frontend/dist s3://${BUCKET_NAME}/  
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: cimg/python:3.8
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "13:19:d0:85:aa:eb:66:62:a6:99:db:99:a7:8d:5a:51"   # udacity project 3 key
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [v2-pip-cache, backend-build]
      - run:
          name: Install ansible and rsync
          command: |
            pip install ansible
            sudo apt update && sudo apt install -y rsync
      - run:
          name: Install node
          command: |
            curl -O https://deb.nodesource.com/setup_13.x   # saves output as setup_13.x
            sudo bash setup_13.x
            sudo apt install -y nodejs
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: build backend with correct env vars (refactor me)
          command: |
            cd backend
            echo "NODE_ENV=production" > .env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> .env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> .env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> .env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> .env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> .env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> .env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> .env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> .env
            # cat .env
            npm install typescript  # install typescript (no need to install ALL packages)
            npm run build
      - run:
          name: Deploy backend
          working_directory: .circleci/ansible/
          command: |
            echo "inventory: $(cat inventory.txt)"
            ansible-playbook deploy-backend.yml -i inventory.txt -vvvv
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: alpine:latest
    environment:
      ID: << pipeline.parameters.workflow-id >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache gzip tar curl
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          working_directory: .circleci/ansible
          command: |
            echo "backend ip from ansible: $(cat inventory.txt)"
            # TODO: inventory.txt will not contain only the backend ip (extract the ip)
            export BACKEND_IP=$(cat inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            curl -s "$API_URL/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            # TODO: region is hard-coded
            export FRONTEND_URL="http://udapeople-${ID}.s3-website.ap-northeast-2.amazonaws.com"
            curl -s ${FRONTEND_URL} | grep "Welcome"    # should return a non-zero rc if failed
      # Here's where you will add some code to rollback on failure
      - revert-migrations # TODO: how will it work w/o aws client ?

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:

        # TODO: remove me in prod (the next line)
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # requires: [build-backend]
          filters:
            branches:
              only: [smoke-test]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      - run-migrations:
          # requires: [configure-infrastructure]
          requires: [deploy-infrastructure]   # TODO: this is not the correct 'require'. use ^ instead
      - deploy-frontend:
          requires: [run-migrations]
          # requires: [deploy-infrastructure]   # TODO: this is not the correct 'require'. use ^ instead
      - deploy-backend:
          requires: [run-migrations]
          # requires: [deploy-infrastructure]   # TODO: this is not the correct 'require'. use ^ instead
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
