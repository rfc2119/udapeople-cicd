version: 2.1

# pipeline variables
parameters:
  workflow-id:
    type: string
    default: "cd0d8qrsenyt"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install webpack # install webpack
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install typescript  # install typescript
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install oauth-sign  # some test suite fails to run in absense of pauth package
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install jest  # TODO: how on earth is the test runner not installed ? even though the same image is used...
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
              
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan Front-end for vulnerabilites
          command: |
            cd frontend
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend
              
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan Back-end for vulnerabilites
          command: |
            cd backend
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend

  # workflow id: cd0d8qrsenyt
  # see https://circleci.com/docs/2.0/env-vars
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    environment:
      ID: << pipeline.parameters.workflow-id >>
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "13:19:d0:85:aa:eb:66:62:a6:99:db:99:a7:8d:5a:51"   # udacity project 3 key
      - run:
          yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="backend-$ID" \
              --stack-name "udapeople-backend-$ID" \
              --parameter-overrides ID=$ID
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend-$ID \
              --stack-name udapeople-frontend-$ID \
              --parameter-overrides ID=$ID
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "cwd: $CIRCLE_WORKING_DIRECTORY"
            aws ec2 describe-instances \
              --filters Name="tag:Name,Values=backend-$ID" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text | tee -a .circleci/ansible/inventory.txt
            # $CIRCLE_WORKING_DIRECTORY defaults to "project"
            # see https://circleci.com/docs/2.0/configuration-reference/#jobs
      # this step requires tar and gzip to be installed on the image
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      # image: python:3.7-slim-buster
      # based on circleci's cimg/base which is an optimized ubuntu image
      - image: cimg/python:3.7
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      # thus adds private keys of fingerprint X to the server, so that you could
      # use ssh from within the server to other machines
      - add_ssh_keys:
          fingerprints:
            - "13:19:d0:85:aa:eb:66:62:a6:99:db:99:a7:8d:5a:51"   # udacity project 3 key
      # attach workspace
      # The workspace can be used to pass along unique data built during a job
      # to other jobs in the same workflow
      - attach_workspace:
          at: /tmp/
      - run:
          name: Debugging
          command: |
            ls -l ~/.ssh/
            cat /tmp/project/.circleci/ansible/inventory.txt
      # TODO: use save/restore cache
      - run:
          name: Install dependencies
          command: |
            pip install ansible
      - run:
          name: Configure server
          working_directory: .circleci/ansible
          command: |
            cp /tmp/project/.circleci/ansible/inventory.txt ./
            cat inventory.txt
            ansible-playbook configure-server.yml -i inventory.txt --verbose
            # exit 1
      # Here's where you will add some code to rollback on failure      

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
        # TODO: remove me
        # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [deploy-to-prod]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
